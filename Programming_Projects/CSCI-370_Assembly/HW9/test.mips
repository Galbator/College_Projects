// Loop Test File - HW9

//------------------------------------------------
//                 : Planning :
//
//  Registers: r0, r1, r2, r3, r4
//    r0 : Base Work Register
//    r1 : Free
//    r2 : Free
//    r3 : Free
//    r4 : Free
//
//  Loop Design (dual_4-stage loop): 
//    Set r0 to 0 for increment through loop
//    r1-r4 : Value for if's
//
//------------------------------------------------

// Initialization
010110.00001.00001.0000000000000000 // Reg1 = 0 : if 1
010101.00000.00001.0000000001100010 // Save 0 to RAM[98]
010110.00010.00010.0000000000000001 // Reg2 = 1 : if 2
010110.00011.00011.0000000000000010 // Reg3 = 2 : if 3
010110.00100.00100.0000000000000011 // Reg4 = 3 : if 4

// Prompt for a bit : "Please enter a bit: "
010110.00000.00110.0000000001010000 // Reg6(Print) = Reg0 + 80(P) : Print 'P'
010110.00000.00110.0000000001101100 // Print 'l'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001100001 // Print 'a'
010110.00000.00110.0000000001110011 // Print 's'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001101110 // Print 'n'
010110.00000.00110.0000000001110100 // Print 't'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001110010 // Print 'r'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100001 // Print 'a'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100010 // Print 'b'
010110.00000.00110.0000000001101001 // Print 'i'
010110.00000.00110.0000000001110100 // Print 't'
010110.00000.00110.0000000000111010 // Print ':'
010110.00000.00110.0000000000100000 // Print 'space'

// Zero Initial
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0

// IF's
010000.00000.00001.0000000000111101 // LN : 61
010000.00001.00010.0000000001000010 // LN : 66
010000.00001.00011.0000000001000111 // LN : 71
010000.00001.00100.0000000001001100 // LN : 76
000010.00000000000000000001010000 // LN : 80

// IF 0
010101.00000.00101.0000000000000000 // Save Reg5 to RAM[0]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000000011010 // LN : 26

// IF 1
010101.00000.00101.0000000000000001 // Save Reg5 to RAM[1]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000000011010 // LN : 26

// IF 2
010101.00000.00101.0000000000000010 // Save RAM[2]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000000011010 // LN : 26

// IF 3
010101.00000.00101.0000000000000011 // Save RAM[3]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000001010000 // LN : 80

010100.00000.00001.0000000001100010 // Reg1 Reset with RAM[98] : 0
010100.00000.00010.0000000001100010 // Reg2 Reset -
010100.00000.00011.0000000001100010 // Reg3 Reset - 
010100.00000.00100.0000000001100010 // Reg4 Reset - 

// Initialization #2
010110.00001.00001.0000000000000100 // Reg1 = 4 : if 0
010110.00010.00010.0000000000000101 // Reg2 = 5 : if 1
010110.00011.00011.0000000000000110 // Reg3 = 6 : if 2
010110.00100.00100.0000000000000111 // Reg4 = 7 : if 3

// Prompt for a bit : "Please enter a bit: "
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0
010110.00000.00110.0000000001010000 // Reg6(Print) = Reg0 + 80(P) : Print 'P'
010110.00000.00110.0000000001101100 // Print 'l'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001100001 // Print 'a'
010110.00000.00110.0000000001110011 // Print 's'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001101110 // Print 'n'
010110.00000.00110.0000000001110100 // Print 't'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001110010 // Print 'r'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100001 // Print 'a'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100010 // Print 'b'
010110.00000.00110.0000000001101001 // Print 'i'
010110.00000.00110.0000000001110100 // Print 't'
010110.00000.00110.0000000000111010 // Print ':'
010110.00000.00110.0000000000100000 // Print 'space'

// Zero Initial
010110.00000.00000.0000000000000100 // Set Reg0 = 4

// IF's
010000.00000.00001.0000000010000000 // LN : 128
010000.00001.00010.0000000010000101 // LN : 133
010000.00001.00011.0000000010001011 // LN : 139
010000.00001.00100.0000000010010001 // LN : 145
000010.00000000000000000010010111 // LN : 151

// IF 0
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0
010101.00000.00101.0000000000000100 // Save Reg5 to RAM[4]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000001011100 // LN : 92

// IF 1
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0
010101.00000.00101.0000000000000101 // Save Reg5 to RAM[5]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000001011100 // LN : 92

// IF 2
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0
010101.00000.00101.0000000000000110 // Save RAM[6]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000001011100 // LN : 92

// IF 3
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0
010101.00000.00101.0000000000000111 // Save RAM[7]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000010010111 // LN : 151

010110.00000.00110.0000000000001010 // Print 'Linefeed'
010100.00000.00110.0000000000000000 // Print RAM[0]
010100.00000.00110.0000000000000001 // Print RAM[1]
010100.00000.00110.0000000000000010 // Print RAM[2]
010100.00000.00110.0000000000000011 // Print RAM[3]
010100.00000.00110.0000000000000100 // Print RAM[4]
010100.00000.00110.0000000000000101 // Print RAM[5]
010100.00000.00110.0000000000000110 // Print RAM[6]
010100.00000.00110.0000000000000111 // Print RAM[7]
010110.00000.00110.0000000000001010 // Print 'Linefeed'

010110.00000.00110.0000000000001010 // Print 'Linefeed'
010101.00000.00101.0000000001100011 // Save Reg5 to RAM[99] : Wait for keypress
000011.0000000000000000 // Exits Program
