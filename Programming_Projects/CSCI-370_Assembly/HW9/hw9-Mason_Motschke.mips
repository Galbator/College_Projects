// Mason Motschke - CSCI_370 - HW9
// Integrated loop from testing file into program

// Initialization
010110.00001.00001.0000000000000000 // Reg1 = 0 : if 1
010101.00000.00001.0000000001100010 // Save 0 to RAM[98]
010110.00010.00010.0000000000000001 // Reg2 = 1 : if 2
010110.00011.00011.0000000000000010 // Reg3 = 2 : if 3
010110.00100.00100.0000000000000011 // Reg4 = 3 : if 4

// Prompt for a bit : "Please enter a bit: "
010110.00000.00110.0000000001010000 // Reg6(Print) = Reg0 + 80(P) : Print 'P'
010110.00000.00110.0000000001101100 // Print 'l'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001100001 // Print 'a'
010110.00000.00110.0000000001110011 // Print 's'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001101110 // Print 'n'
010110.00000.00110.0000000001110100 // Print 't'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001110010 // Print 'r'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100001 // Print 'a'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100010 // Print 'b'
010110.00000.00110.0000000001101001 // Print 'i'
010110.00000.00110.0000000001110100 // Print 't'
010110.00000.00110.0000000000111010 // Print ':'
010110.00000.00110.0000000000100000 // Print 'space'

// Zero Initial
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0

// IF's
010000.00000.00001.0000000000101110 // LN : 46
010000.00001.00010.0000000000110011 // LN : 51
010000.00001.00011.0000000000111000 // LN : 56
010000.00001.00100.0000000000111101 // LN : 61
000010.00000000000000000001000001 // LN : 65

// IF 0
010101.00000.00101.0000000000000000 // Save Reg5 to RAM[0]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000000001011 // LN : 11

// IF 1
010101.00000.00101.0000000000000001 // Save Reg5 to RAM[1]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000000001011 // LN : 11

// IF 2
010101.00000.00101.0000000000000010 // Save RAM[2]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000000001011 // LN : 11

// IF 3
010101.00000.00101.0000000000000011 // Save RAM[3]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000001000001 // LN : 65

010100.00000.00001.0000000001100010 // Reg1 Reset with RAM[98] : 0
010100.00000.00010.0000000001100010 // Reg2 Reset -
010100.00000.00011.0000000001100010 // Reg3 Reset - 
010100.00000.00100.0000000001100010 // Reg4 Reset - 

// Initialization #2
010110.00001.00001.0000000000000100 // Reg1 = 4 : if 0
010110.00010.00010.0000000000000101 // Reg2 = 5 : if 1
010110.00011.00011.0000000000000110 // Reg3 = 6 : if 2
010110.00100.00100.0000000000000111 // Reg4 = 7 : if 3

// Prompt for a bit : "Please enter a bit: "
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0
010110.00000.00110.0000000001010000 // Reg6(Print) = Reg0 + 80(P) : Print 'P'
010110.00000.00110.0000000001101100 // Print 'l'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001100001 // Print 'a'
010110.00000.00110.0000000001110011 // Print 's'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001101110 // Print 'n'
010110.00000.00110.0000000001110100 // Print 't'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001110010 // Print 'r'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100001 // Print 'a'
010110.00000.00110.0000000000100000 // Print 'space'

010110.00000.00110.0000000001100010 // Print 'b'
010110.00000.00110.0000000001101001 // Print 'i'
010110.00000.00110.0000000001110100 // Print 't'
010110.00000.00110.0000000000111010 // Print ':'
010110.00000.00110.0000000000100000 // Print 'space'

// Zero Initial
010110.00000.00000.0000000000000100 // Set Reg0 = 4

// IF's
010000.00000.00001.0000000001110001 // LN : 113
010000.00001.00010.0000000001110110 // LN : 118
010000.00001.00011.0000000001111100 // LN : 124
010000.00001.00100.0000000010000010 // LN : 130
000010.00000000000000000010001000 // LN : 136

// IF 0
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0
010101.00000.00101.0000000000000100 // Save Reg5 to RAM[4]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000001001101 // LN : 77

// IF 1
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0
010101.00000.00101.0000000000000101 // Save Reg5 to RAM[5]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000001001101 // LN : 77

// IF 2
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0
010101.00000.00101.0000000000000110 // Save RAM[6]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000001001101 // LN : 77

// IF 3
010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0
010101.00000.00101.0000000000000111 // Save RAM[7]
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
000010.00000000000000000010001000 // LN : 136

010100.00000.00000.0000000001100010 // Reg0 Reset with RAM[98] : 0
010100.00000.00001.0000000001100010 // Reg1 Reset -
010100.00000.00010.0000000001100010 // Reg2 Reset -
010100.00000.00011.0000000001100010 // Reg3 Reset - 
010100.00000.00100.0000000001100010 // Reg4 Reset - 

// Print "Before: "
010110.00000.00110.0000000000001010 // Print 'Linefeed'
010110.00000.00110.0000000001000010 // Print 'B'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001100110 // Print 'f'
010110.00000.00110.0000000001101111 // Print 'o'
010110.00000.00110.0000000001110010 // Print 'r'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000000111010 // Print ':'
010110.00000.00110.0000000000100000 // Print 'space'

// Print bit string : RAM[0-7]
010100.00000.00110.0000000000000000 // Print RAM[0]
010100.00000.00110.0000000000000001 // Print RAM[1]
010100.00000.00110.0000000000000010 // Print RAM[2]
010100.00000.00110.0000000000000011 // Print RAM[3]
010100.00000.00110.0000000000000100 // Print RAM[4]
010100.00000.00110.0000000000000101 // Print RAM[5]
010100.00000.00110.0000000000000110 // Print RAM[6]
010100.00000.00110.0000000000000111 // Print RAM[7]
010110.00000.00110.0000000000001010 // Print 'Linefeed'
010110.00000.00110.0000000000001010 // Print 'Linefeed'

// Count Number of 1's in bits : RAM[0-7] : Save at RAM[9]
010100.00001.00001.0000000001100010 // Reg1 set to RAM[98] : 0
010100.00010.00010.0000000001100010 // Reg2 set to RAM[98] : 0
010110.00011.00011.0000000000000000 // Reg3 set to RAM[98] : 0 : Count 1's
010110.00000.00010.0000000000110001 // Reg2 = 49(1)

// Check RAM[0]
010100.00000.00001.0000000000000000 // Load RAM[0] to Reg1
010000.00001.00010.0000000010110000 // If 1 goto 176
000010.00000000000000000010110001 // If 0 goto 177
010110.00011.00011.0000000000000001 // Increment Reg3 by 1

// Check RAM[1]
010100.00000.00001.0000000000000001 // Load RAM[1] to Reg1
010000.00001.00010.0000000010110110 // If 1 goto 182
000010.00000000000000000010110111 // If 0 goto 183
010110.00011.00011.0000000000000001 // Increment Reg3 by 1

// Check RAM[2]
010100.00000.00001.0000000000000010 // Load RAM[2] to Reg1
010000.00001.00010.0000000010111100 // If 1 goto 188
000010.00000000000000000010111101 // If 0 goto 189
010110.00011.00011.0000000000000001 // Increment Reg3 by 1

// Check RAM[3]
010100.00000.00001.0000000000000011 // Load RAM[3] to Reg1
010000.00001.00010.0000000011000010 // If 1 goto 194
000010.00000000000000000011000011 // If 0 goto 195
010110.00011.00011.0000000000000001 // Increment Reg3 by 1

// Check RAM[4]
010100.00000.00001.0000000000000100 // Load RAM[4] to Reg1
010000.00001.00010.0000000011001000 // If 1 goto 200
000010.00000000000000000011001001 // If 0 goto 201
010110.00011.00011.0000000000000001 // Increment Reg3 by 1

// Check RAM[5]
010100.00000.00001.0000000000000101 // Load RAM[5] to Reg1
010000.00001.00010.0000000011001110 // If 1 goto 206
000010.00000000000000000011001111 // If 0 goto 207
010110.00011.00011.0000000000000001 // Increment Reg3 by 1

// Check RAM[6]
010100.00000.00001.0000000000000110 // Load RAM[6] to Reg1
010000.00001.00010.0000000011010100 // If 1 goto 212
000010.00000000000000000011010101 // If 0 goto 213
010110.00011.00011.0000000000000001 // Increment Reg3 by 1

// Check RAM[7]
010100.00000.00001.0000000000000111 // Load RAM[7] to Reg1
010000.00001.00010.0000000011011010 // If 1 goto 218
000010.00000000000000000011011011 // If 0 goto 219
010110.00011.00011.0000000000000001 // Increment Reg3 by 1

010101.00000.00011.0000000000001010 // Save Reg3 to RAM[10]
010100.00000.00100.0000000001100010 // Reg4 = RAM[98] : 0

// Set ninth bit so final number of 1's is ODD : Set Parity bit to RAM[8]
010000.00011.00100.0000000011110011 // If 0 Final bit is 1 : 243
010110.00100.00100.0000000000000001 // Increment Reg4 by 1
010000.00011.00100.0000000011110111 // If 1 goto 247
010110.00100.00100.0000000000000001 // Increment Reg4 by 1
010000.00011.00100.0000000011110011 // If 2 : 243
010110.00100.00100.0000000000000001 // Increment Reg4 by 1
010000.00011.00100.0000000011110111 // If 3 : 247
010110.00100.00100.0000000000000001 // Increment Reg4 by 1
010000.00011.00100.0000000011110011 // If 4 : 243
010110.00100.00100.0000000000000001 // Increment Reg4 by 1
010000.00011.00100.0000000011110111 // If 5 : 247
010110.00100.00100.0000000000000001 // Increment Reg4 by 1
010000.00011.00100.0000000011110011 // If 6 : 243
010110.00100.00100.0000000000000001 // Increment Reg4 by 1
010000.00011.00100.0000000011110111 // If 7 : 247
010110.00100.00100.0000000000000001 // Increment Reg4 by 1
010000.00011.00100.0000000011110011 // If 8 : 243
000010.00000000000000000011110111  // If gets through all ifs goto : 247

// Set 9th bit to 1
010110.00000.00001.0000000000110001 // Reg1 = 49(1)
010101.00000.00001.0000000000001000 // Save Reg1 to RAM[8]
000010.00000000000000000011111011 // Jump to 251
// Set 9th bit to 0
010110.00000.00001.0000000000110000 // Reg1 = 48(0)
010101.00000.00001.0000000000001000 // Save Reg1 to RAM[8]

// Print "After: "
010110.00000.00110.0000000001000001 // Print 'A'
010110.00000.00110.0000000001100110 // Print 'f'
010110.00000.00110.0000000001110100 // Print 't'
010110.00000.00110.0000000001100101 // Print 'e'
010110.00000.00110.0000000001110010 // Print 'r'
010110.00000.00110.0000000000111010 // Print ':'
010110.00000.00110.0000000000100000 // Print 'space'

// Print bit string : RAM[0-7]
010100.00000.00110.0000000000000000 // Print RAM[0]
010100.00000.00110.0000000000000001 // Print RAM[1]
010100.00000.00110.0000000000000010 // Print RAM[2]
010100.00000.00110.0000000000000011 // Print RAM[3]
010100.00000.00110.0000000000000100 // Print RAM[4]
010100.00000.00110.0000000000000101 // Print RAM[5]
010100.00000.00110.0000000000000110 // Print RAM[6]
010100.00000.00110.0000000000000111 // Print RAM[7]
010110.00000.00110.0000000000001010 // Print 'Linefeed'

// Print Parity bit on next line : Print "Parity: "
010110.00000.00110.0000000001010000 // Print 'P'
010110.00000.00110.0000000001100001 // Print 'a'
010110.00000.00110.0000000001110010 // Print 'r'
010110.00000.00110.0000000001101001 // Print 'i'
010110.00000.00110.0000000001110100 // Print 't'
010110.00000.00110.0000000001111001 // Print 'y'
010110.00000.00110.0000000000111010 // Print ':'
010110.00000.00110.0000000000100000 // Print 'space'
010100.00000.00110.0000000000001000 // Print RAM[8]
010110.00000.00110.0000000000001010 // Print 'Linefeed'

010110.00000.00110.0000000000001010 // Print 'Linefeed'
010101.00000.00101.0000000001100011 // Save Reg5 to RAM[99] : Wait for keypress
000011.0000000000000000 // Exits Program
