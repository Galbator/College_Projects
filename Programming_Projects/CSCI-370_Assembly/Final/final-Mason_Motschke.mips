// Mason Motschke - CSCI_370 - Final : Extra Credit Attempt : EXIT Char is Q

// Initialization
010101.00000.00000.0000000001100010 // Save 0 to RAM[98]
010110.00000.00001.0000000000000000 // Reg1 = 0
010110.00000.00010.0000000000000000 // Reg2 = 0
010110.00000.00011.0000000000000000 // Reg3 = 0
010110.00000.00100.0000000000000000 // Reg4 = 0

// Record Target Char
010110.00000.00001.0000000000100011 // Reg1 = #
010101.00000.00001.0000000000000000 // Record to RAM[0]
000010.00000000000000000001101111 // Jump to Line 111

// Display "Guessing Game"
010110.00000.00110.0000000000001010 // Linefeed
010110.00000.00110.0000000001000111 // G
010110.00000.00110.0000000001110101 // u
010110.00000.00110.0000000001100101 // e
010110.00000.00110.0000000001110011 // s
010110.00000.00110.0000000001110011 // s
010110.00000.00110.0000000001101001 // i
010110.00000.00110.0000000001101110 // n
010110.00000.00110.0000000001100111 // g
010110.00000.00110.0000000000100000 // Space
010110.00000.00110.0000000001000111 // G
010110.00000.00110.0000000001100001 // a
010110.00000.00110.0000000001101101 // m
010110.00000.00110.0000000001100101 // e
010110.00000.00110.0000000000001010 // Linefeed

// Display "-------------" using a FOR Loop : 13 dashes needed
010110.00000.00001.0000000000000000 // Reg1 = 0
010110.00000.00100.0000000000001101 // Reg4 = 13
010110.00000.00110.0000000000101101 // -
010110.00001.00001.0000000000000001 // Reg1 = Reg1 + 1
010010.00100.00001.0000000000100011 // Jump to Line 35 : IF Reg1 < Reg4
010110.00000.00001.0000000000000000 // Reg1 = 0
010110.00000.00100.0000000000000000 // Reg4 = 0

010110.00000.00110.0000000000001010 // Linefeed
010110.00000.00110.0000000000001010 // Linefeed

// Display "Enter a character: "
010110.00000.00110.0000000001000101 // E
010110.00000.00110.0000000001101110 // n
010110.00000.00110.0000000001110100 // t
010110.00000.00110.0000000001100101 // e
010110.00000.00110.0000000001110010 // r
010110.00000.00110.0000000000100000 // Space
010110.00000.00110.0000000001100001 // a
010110.00000.00110.0000000000100000 // Space
010110.00000.00110.0000000001100011 // c
010110.00000.00110.0000000001101000 // h
010110.00000.00110.0000000001100001 // a
010110.00000.00110.0000000001110010 // r
010110.00000.00110.0000000001100001 // a
010110.00000.00110.0000000001100011 // c
010110.00000.00110.0000000001110100 // t
010110.00000.00110.0000000001100101 // e
010110.00000.00110.0000000001110010 // r
010110.00000.00110.0000000000111010 // :
010110.00000.00110.0000000000100000 // Space

// Record Keypress
010101.00000.00101.0000000000000101 // Save to RAM[5]

// Compare Values : IF Statements
000010.00000000000000000010101001 // Jump to Line 169 : Find Target Char
010100.00000.00100.0000000000000101 // Load RAM[5] to Reg4
010000.00010.00100.0000000001001011 // Jump to Line 75 : Equal
010010.00010.00100.0000000001010110 // Jump to Line 86 : Less Than
010011.00010.00100.0000000001100010 // Jump to Line 98 : Greater Than

// Equal : Print "You Won!"
010110.00000.00110.0000000001011001 // Y
010110.00000.00110.0000000001101111 // o
010110.00000.00110.0000000001110101 // u
010110.00000.00110.0000000000100000 // Space
010110.00000.00110.0000000001010111 // W
010110.00000.00110.0000000001101111 // o
010110.00000.00110.0000000001101110 // n
010110.00000.00110.0000000000100001 // !
010110.00000.00110.0000000000001010 // Linefeed
000010.00000000000000000001111010 // Jump to Line 122
// Less Than : Print "Too Small"
010110.00000.00110.0000000001010100 // T
010110.00000.00110.0000000001101111 // o
010110.00000.00110.0000000001101111 // o
010110.00000.00110.0000000000100000 // Space
010110.00000.00110.0000000001010011 // S
010110.00000.00110.0000000001101101 // m
010110.00000.00110.0000000001100001 // a
010110.00000.00110.0000000001101100 // l
010110.00000.00110.0000000001101100 // l
010110.00000.00110.0000000000001010 // Linefeed
000010.00000000000000000000101010 // Jump to Line 42
// Greater Than : Print "Too Large"
010110.00000.00110.0000000001010100 // T
010110.00000.00110.0000000001101111 // o
010110.00000.00110.0000000001101111 // o
010110.00000.00110.0000000000100000 // Space
010110.00000.00110.0000000001001100 // L
010110.00000.00110.0000000001100001 // a
010110.00000.00110.0000000001110010 // r
010110.00000.00110.0000000001100111 // g
010110.00000.00110.0000000001100101 // e
010110.00000.00110.0000000000001010 // Linefeed
000010.00000000000000000000101010 // Jump to Line 42

// Set 3 More Target Characters : Total 4 : END in X or Q (Need both in MEM)
010110.00000.00001.0000000001001010 // Reg1 = J
010101.00000.00001.0000000000000001 // Record to RAM[1]
010110.00000.00001.0000000000111101 // Reg1 = =
010101.00000.00001.0000000000000010 // Record to RAM[2]
//010110.00000.00001.0000000001011000 Reg1 = X           : Not Used
//010101.00000.00001.0000000000000011 Record to RAM[3]   : Not Used
010110.00000.00001.0000000001010001 // Reg1 = Q
010101.00000.00001.0000000000000011 // Record to RAM[3]
000010.00000000000000000000001111 // Jump to Line 15

// Display "Play Again [Y or N]?: "
010110.00000.00110.0000000001010000 // P
010110.00000.00110.0000000001101100 // l
010110.00000.00110.0000000001100001 // a
010110.00000.00110.0000000001111001 // y
010110.00000.00110.0000000000100000 // Space
010110.00000.00110.0000000001000001 // A
010110.00000.00110.0000000001100111 // g
010110.00000.00110.0000000001100001 // a
010110.00000.00110.0000000001101001 // i
010110.00000.00110.0000000001101110 // n
010110.00000.00110.0000000000100000 // Space
010110.00000.00110.0000000001011011 // [
010110.00000.00110.0000000001011001 // Y
010110.00000.00110.0000000000100000 // Space
010110.00000.00110.0000000001101111 // o
010110.00000.00110.0000000001110010 // r
010110.00000.00110.0000000000100000 // Space
010110.00000.00110.0000000001001110 // N
010110.00000.00110.0000000001011101 // ]
010110.00000.00110.0000000000111111 // ?
010110.00000.00110.0000000000111010 // :
010110.00000.00110.0000000000100000 // Space

// Record Keypress
010101.00000.00101.0000000000000101 // Save to RAM[5]

// Compare Values : IF Statements
010110.00000.00001.0000000001011001 // Reg1 = Y
010100.00000.00100.0000000000000101 // Load RAM[5] to Reg4
010001.00100.00001.0000000010011100 // Jump to Line 156 : Not Y
010000.00100.00001.0000000010011101 // Jump to Line 157 : IF Y

// Not Y
000011.00000000000000000000000000 // EXIT
// IF Y
// Increment to Next Target Char
010110.00011.00011.0000000000000001 // Reg3 = Reg3 + 1
// IF Target Char is Q or X
// 010110.00000.00100.0000000001010001  Reg4 = Q         : Not Used
010110.00000.00001.0000000000000011 // Reg1 = 3
010000.00001.00011.0000000010100101 // IF Target char is last char : Jump to Line 165
000010.00000000000000000010100110 // Jump to Line 166 : On Missed IF
000010.00000000000000000010011100 // Jump to Exit : Line 156
010100.00000.00001.0000000001100010 // Load RAM[98] to Reg1 : 0
000010.00000000000000000000101010 // Jump to Line 42

// Find Target Char : Reg2 = TC; Reg3 = Counter
010110.00000.00100.0000000000000000 // Reg4 = 0
010000.00011.00100.0000000010110010 // IF Counter is 0
010110.00000.00100.0000000000000001 // Reg4 = 1
010000.00011.00100.0000000010110101 // IF Counter is 1
010110.00000.00100.0000000000000010 // Reg4 = 2
010000.00011.00100.0000000010111000 // IF Counter is 2
000010.00000000000000000010011100 // Jump to Exit (Line 156) : On Missed IF

// IF 0
010100.00000.00010.0000000000000000 // Load RAM[0] to Reg2
000010.00000000000000000010111011 // Jump to Line 187
// IF 1
010100.00000.00010.0000000000000001 // Load RAM[1] to Reg2
000010.00000000000000000010111011 // Jump to Line 187
// IF 2
010100.00000.00010.0000000000000010 // Load RAM[2] to Reg2

000010.00000000000000000001000110 // Jump to Line 70 : Continue to TC Checking



