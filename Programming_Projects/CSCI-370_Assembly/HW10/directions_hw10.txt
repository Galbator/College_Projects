HW-10		CS370	10 points	Due: Monday, 4/11/2022

Write a C program that simulates placing data into 4 types of caches. These
caches are:
1) Fully Associative using 128 lines with 32 words/line.
2) Direct Mapped using 128 lines with 32 words/line. 
3) 2-way Set Associative using 128 lines with 2 sets/line with 16 words/line. 
4) 4-way Set Associative using 64 lines with 4 sets/line with 16 words/line. 

Note that all 4 caches are size at 4096 words.

For each cache type, your program must generate 500 random memory locations.
We will assume 64K of memory. So you can generate these random addresses using:

    memoryLocation = (rand() % 65536); 

You will then need to convert that decimal value into a binary representation 
and use the binary representation to determine how to populate the applicable 
fields (probably with a decimal value).

For each memory value generated, your code will have to search each cache type
to see if that value is in the cache or not. Note that depending on the cache
type, the search would be different.

If you find that value in the cache move on to the next random memory location.

If you do NOT find that value in the cache, increment your cache miss counter, 
and insert the value into the cache in the appropriate location (which could 
just be the first empty slot found). Note again that depending on the cache
type, the insertion would be different.

After each cache has been "tested" print out the miss ratio. For example, for 
the Fully Associative cache you would use:

   printf("Fully Associative Miss Ratio (percent): %f\n", 100.0*((float)Miss/500.0));

NOTES:
------
1) srand MUST be used to insure the same set of random numbers is used for
   each run.
2) When I run this, I get the following:
   Fully Associative Miss Ratio (percent): 94.200000
   Direct Mapped Miss Ratio (percent): 94.400000
   2-way Set Associative Miss Ratio (percent): 97.600000
   4-way Set Associative Miss Ratio (percent): 94.400000

EXTRA CREDIT (5 points)
-----------------------
1) For each cache type determine and report/display the amount of cache that never
   got used.

REQUIREMENTS:
-------------
1. Your program must run on the Linux Mint machines in Engineering.
2. Your full name must appear as a comment at the beginning of your program.
3. Your source code must be named hw10-yourname.c
4. Failure to follow the above directions will result in loss of points.